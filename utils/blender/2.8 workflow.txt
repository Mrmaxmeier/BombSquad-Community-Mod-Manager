bl_info = {
    "name": "BombSquad",
    "blender": (2, 80, 0),
    "category": "BombSquad",
}

import bpy

class Assemble(bpy.types.Operator):
    """Assembles the bombsquad mesh"""      # Use this as a tooltip for menu items and buttons.
    bl_idname = "bs.assemble"        # Unique identifier for buttons and menu items to reference.
    bl_label = "Assemble the bombsquad mesh"         # Display name in the interface.
    bl_options = {'REGISTER', 'UNDO'}  # Enable undo for the operator.

    def execute(self, context):        # execute() is called when running the operator.

        parts = ["Head", "Torso", "Pelvis", "UpperArm", "ForeArm", "Hand", "UpperLeg", "LowerLeg", "Toes"]

        locrot =[[0,0,0.942794,1.5708,0,0],[0,0,0.496232,1.5708,0,0],[0,-0.03582,0.361509,1.35976,0,0],[-0.207339,0.016968,0.516395,3.32611,0.185005,0],[-0.199252,-0.013197,0.372489,2.67074,0,0],[-0.195932,-0.0641,0.321099,2.39285,0,0],[-0.09192,-0.031631,0.266533,2.94554,0,0],[-0.088037,-0.063052,0.113304,3.14159,0,0],[-0.086935,-0.11274,0.069577,3.14159,0,0]]

        for index in range(len(parts)):
            bpy.ops.object.select_all(action='DESELECT')
            bpy.data.objects[parts[index]].select_set(True)
            bpy.context.view_layer.objects.active = bpy.data.objects[parts[index]]
            bpy.context.object.location = (locrot[index][0], locrot[index][1], locrot[index][2])
            bpy.context.object.rotation_euler = (locrot[index][3], locrot[index][4], locrot[index][5])
            bpy.ops.object.shade_smooth()
            bpy.context.object.data.use_auto_smooth = True
            bpy.context.object.data.auto_smooth_angle = 0.523599

        bpy.ops.object.select_all(action='DESELECT')
        
        mirrorparts = ["UpperArm", "ForeArm", "Hand", "UpperLeg", "LowerLeg", "Toes"]

        for index in range(len(mirrorparts)):
            bpy.ops.object.select_all(action='DESELECT')
            bpy.data.objects[mirrorparts[index]].select_set(True)
            bpy.context.view_layer.objects.active = bpy.data.objects[mirrorparts[index]]
            bpy.ops.object.modifier_add(type='MIRROR')
            bpy.context.object.modifiers["Mirror"].mirror_object = bpy.data.objects["Torso"]
            
        bpy.ops.object.select_all(action='DESELECT')

        return {'FINISHED'}
    
class Disassemble(bpy.types.Operator):
    """Disassembles the bombsquad mesh"""      # Use this as a tooltip for menu items and buttons.
    bl_idname = "bs.disassemble"        # Unique identifier for buttons and menu items to reference.
    bl_label = "Disassemble the bombsquad mesh"         # Display name in the interface.
    bl_options = {'REGISTER', 'UNDO'}  # Enable undo for the operator.
    
    def execute(self, context):
        
        parts = ["Head", "Torso", "Pelvis", "UpperArm", "ForeArm", "Hand", "UpperLeg", "LowerLeg", "Toes"]

        locrot =[[0,0,0.942794,1.5708,0,0],[0,0,0.496232,1.5708,0,0],[0,-0.03582,0.361509,1.35976,0,0],[-0.207339,0.016968,0.516395,3.32611,0.185005,0],[-0.199252,-0.013197,0.372489,2.67074,0,0],[-0.195932,-0.0641,0.321099,2.39285,0,0],[-0.09192,-0.031631,0.266533,2.94554,0,0],[-0.088037,-0.063052,0.113304,3.14159,0,0],[-0.086935,-0.11274,0.069577,3.14159,0,0]]

        for index in range(len(parts)):
            bpy.ops.object.select_all(action='DESELECT')
            bpy.data.objects[parts[index]].select_set(True)
            bpy.context.view_layer.objects.active = bpy.data.objects[parts[index]]
            bpy.context.scene.cursor.location = (locrot[index][0], locrot[index][1], locrot[index][2])
            bpy.ops.object.origin_set(type='ORIGIN_CURSOR')
            bpy.context.object.location = (0, 0, 0)
            bpy.context.object.rotation_euler = (1.5708, 0, 0)
            
        bpy.ops.object.select_all(action='DESELECT')

        bpy.context.scene.cursor.location = (0, 0, 0)
          
        mirrorparts = ["UpperArm", "ForeArm", "Hand", "UpperLeg", "LowerLeg", "Toes"]

        for index in range(len(mirrorparts)):
            bpy.ops.object.select_all(action='DESELECT')
            bpy.data.objects[mirrorparts[index]].select_set(True)
            bpy.context.view_layer.objects.active = bpy.data.objects[mirrorparts[index]] 
            bpy.ops.object.modifier_remove(modifier="Mirror")

        bpy.ops.object.select_all(action='DESELECT')
    
        return {'FINISHED'}

def register():
    bpy.utils.register_class(Assemble)
    bpy.utils.register_class(Disassemble)


def unregister():
    bpy.utils.unregister_class(Assemble)
    bpy.utils.unregister_class(Disassemble)


# This allows you to run the script directly from Blender's Text editor
# to test the add-on without having to install it.
if __name__ == "__main__":
    register()